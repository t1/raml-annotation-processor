package com.github.t1.ramlap;

import static javax.ws.rs.core.Response.Status.Family.*;

import java.net.URI;
import java.util.UUID;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.StatusType;

/**
 * Defines a "problem detail" as a way to carry machine-readable details of errors in a HTTP response, to avoid the need to
 * invent new error response formats for HTTP APIs.
 * 
 * @see <a href="https://tools.ietf.org/html/draft-ietf-appsawg-http-problem-01">IETF: Problem Details for HTTP APIs</a>
 */
public class ProblemDetail {
    /** The String Content-Type for {@link ProblemDetail}s */
    public static final String PROBLEM_JSON = "application/problem+json";
    /** The {@link MediaType} Content-Type for {@link ProblemDetail}s */
    public static final MediaType PROBLEM_JSON_TYPE = MediaType.valueOf(PROBLEM_JSON);

    public static ProblemDetail of(Class<?> type) {
        ProblemDetail problemDetail = of(URI.create("urn:problem:" + type.getName()));
        if (type.isAnnotationPresent(ApiResponse.class))
            problemDetail = problemDetail.status(type.getAnnotation(ApiResponse.class).status());
        return problemDetail;
    }

    public static ProblemDetail of(URI type) {
        return new ProblemDetail(type, null, null, null, defaultInstanceUri());
    }

    private static URI defaultInstanceUri() {
        return URI.create("urn:problem-instance:" + UUID.randomUUID());
    }

    /**
     * A URI reference [RFC3986] that identifies the problem type. When dereferenced, it is encouraged to provide
     * human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html401-19991224]). When this member
     * is not present, its value is assumed to be "about:blank".
     */
    private final URI type;

    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the
     * problem, except for purposes of localization.
     */
    private final String title;

    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     */
    private final StatusType status;

    /**
     * An human readable explanation specific to this occurrence of the problem.
     */
    private final String detail;

    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further
     * information if dereferenced.
     */
    private final URI instance;

    /** required by JAXB, etc. */
    private ProblemDetail() {
        this.type = null;
        this.title = null;
        this.status = null;
        this.detail = null;
        this.instance = null;
    }

    private ProblemDetail(URI type, String title, StatusType status, String detail, URI instance) {
        this.type = type;
        this.title = title;
        this.status = status;
        this.detail = detail;
        this.instance = instance;
    }

    public ProblemDetail title(String title) {
        return new ProblemDetail(this.type, title, this.status, this.detail, this.instance);
    }

    public ProblemDetail status(StatusType status) {
        return new ProblemDetail(this.type, this.title, status, this.detail, this.instance);
    }

    public ProblemDetail detail(String detail) {
        return new ProblemDetail(this.type, this.title, this.status, detail, this.instance);
    }

    public ProblemDetail instance(URI instance) {
        return new ProblemDetail(this.type, this.title, this.status, this.detail, instance);
    }

    public Response toResponse() {
        return Response.status(status) //
                .entity(this).type(PROBLEM_JSON_TYPE) //
                .build();
    }

    public WebApplicationException toWebException() {
        if (status.getFamily() == SERVER_ERROR)
            return new WebApplicationException(toResponse());
        return new WebApplicationApplicationException(toResponse());
    }

    @Override
    public String toString() {
        return "ProblemDetail:" //
                + ((type == null) ? "" : type) //
                + ((title == null) ? "" : (" \"" + title + "\"")) //
                + ((status == null) ? "" : (status.getStatusCode() + " " + status.getReasonPhrase())) //
                + ((detail == null) ? "" : ": " + detail) //
                + ((instance == null) ? "" : (" [" + instance + "]")) //
                ;
    }
}
